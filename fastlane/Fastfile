
desc "Rename project template"
desc 'Use this lane when you\'re creating a new project to rename it from project template to desired name.
#### Options
 * **`name`** (Optional): New name of project. If not provided user is prompted to write one.'
lane :rename do |options|
  name = options[:name] || UI.input("Enter new name:")

  old_name = "ProjectTemplate"

  sh "rm -r ../#{name} || true"
  sh "mv ../#{old_name} ../#{name} || true"

  change_project_name_recursively("../#{name}", [".swift", ".h", ".m"], old_name, name)
  change_project_name_recursively("../Tests", [".swift", ".h", ".m"], old_name, name)

  sh "rm -r ../#{old_name}.xcworkspace || true"

  sh "rm -r ../#{name}.xcodeproj || true"
  change_project_name_recursively("../#{old_name}.xcodeproj", [".pbxproj", ".xcscheme"], old_name, name)
  sh "mv ../#{old_name}.xcodeproj ../#{name}.xcodeproj || true"

  change_project_name_recursively("../Podfile", nil, old_name, name)
  change_project_name_recursively("../.swiftlint.yml", nil, old_name, name)
  change_project_name_recursively("../.travis.yml", nil, old_name + ".xcworkspace", name + ".xcworkspace")
end


def change_project_name_recursively(path, file_types, replace_from, replace_to)
  if File.directory? path
    file_names = (Dir.entries(path) - %w{ . .. })
  else
    file_names = [path]
  end

  file_names.each do |file_name|
    if file_name != path
      file_name = File.expand_path(file_name, path)
    end

    UI.message "#{file_name}"

    if !file_types || file_types.include?(File.extname(file_name))
      text = File.read(file_name)
      new_contents = text.gsub(/#{replace_from}/, replace_to)

      File.open(file_name, "w") { |file| file.puts new_contents }
    elsif File.directory? file_name
      change_project_name_recursively(file_name, file_types, replace_from, replace_to)
    end
  end
end
